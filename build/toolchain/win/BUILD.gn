toolchain("clang") {
  cc = "clang"
  cxx = "clang++"
  ar = "lib"
  ld = cxx

  lib_switch = ""
  lib_dir_switch = "-L"

  tool("cc") {
    depfile = "{{output}}.d"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("asm") {
    depfile = "{{output}}.d"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "ASM {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
    description = "COPY {{source}} {{output}}"
  }

  tool("alink") {
    command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
    description = "AR {{output}}"
    outputs = [
      "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
    ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    dllname = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"  # e.g. foo.dll
    libname = "${dllname}.lib"  # e.g. foo.dll.lib
    rspfile = "${dllname}.rsp"

    link_command = "link.exe /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:${dllname}.pdb @$rspfile"

    command = link_command

    default_output_extension = ".dll"
    description = "LINK(DLL) {{output}}"
    outputs = [
      dllname,
      libname,
    ]
    link_output = libname
    depend_output = libname

    # Since the above commands only updates the .lib file when it changes, ask
    # Ninja to check if the timestamp actually changed to know if downstream
    # dependencies should be recompiled.
    restat = true

    # The use of inputs_newline is to work around a fixed per-line buffer
    # size in the linker.
    rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}}"
  }

  tool("link") {
    outfile = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
    command = "$ld {{ldflags}} -o $outfile -Wl,--start-group {{inputs}} {{solibs}} -Wl,--end-group {{libs}}"
    description = "LINK $outfile"
    outputs = [
      outfile,
    ]
  }
}
